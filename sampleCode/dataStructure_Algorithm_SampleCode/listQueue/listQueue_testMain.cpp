#include "listQueue.h" 
#include <stdio.h> 
int menu(char **, int); 
void myFlush(); 
void input(Queue *); 
void myDelete(Queue *); 
//--------------------------------------------------------------------------------
//   main() 
//--------------------------------------------------------------------------------
int main() 
{ 
	Queue que; /* 큐생성*/ 
	char *menuList[] = { "입력하기", "삭제하기", "출력하기", "종료"}; /* 메뉴리스트*/ 
	int menuCnt; /* 메뉴개수 저장 변수*/ 
	int menuNum; /* 메뉴번호 저장 변수*/

	initQueue(&que); /* 생성 및 초기화*/ 

	menuCnt = sizeof(menuList)/sizeof(menuList[0]); /* 메뉴 개수 계산 하기*/ 
	while(1) 
	{ 
		menuNum = menu(menuList, menuCnt); 
		if(menuNum == menuCnt) /* 종료메뉴 선택 시 반복문 탈출 하기*/ 
		{ 
			break; 
		} 
		switch(menuNum) 
		{ 
		case 1 : input(&que); break; 
		case 2 : myDelete(&que); break; 
		case 3 : printQueue(&que, printInt); /* queue내의 모든 데이터 출력 하기*/ 
		} 
	} 
	destroyQueue(&que); 
	return 0; 
} 
/*-------------------------------------------------------------------------------------------------------- 
함수명및기능: input() - 큐에 데이터를 반복적으로 입력 함 
전달인자: qPtr - 큐의 주소 
리턴값: 없음 
----------------------------------------------------------------------------------------------------------*/ 
void input(Queue *qPtr) 
{ 
	DataType data; 
	while(1){ 
		printf("Put할 정수형 데이터를 입력하시오(문자나 EOF입력 시 종료) : "); 
		if(scanf("%d", &data)!=1){ /* 문자나 EOF가 입력되면 while문을 빠져 나감*/ 
			myFlush(); 
			break; 
		} 
		if(!enqueue(qPtr, data))
			printf("put(enqueue) 실패!!\n");
	} 
} 
/*------------------------------------------------------------------------------------------------------------ 
함수명 및 기능: myDelete() - 큐에 데이터를 반복적으로 꺼냄 
전달인자: qPtr - 큐의 주소 
리턴값: 없음 
------------------------------------------------------------------------------------------------------------*/ 
void myDelete(Queue *qPtr) 
{ 
	int i; 
	int cnt; /* get할 횟수를 입력 받아 저장할 변수*/ 
	DataType getData; /* get한 데이터를 저장할 변수*/ 
	int res; /* get()함수의 리턴값을 저장할 변수*/ 
	printf("Queue에서 데이터를 get할 회수를 입력하시오: "); 
	scanf("%d", &cnt); 
	for(i=0; i<cnt; i++){ 
		res=dequeue(qPtr, &getData); 
		if(res==TRUE) /* 성공적으로 get 작업을 수행 했으면*/ 
		{ 
			printf("get 데이터: %5d\n", getData); 
		} 
		else
			printf("get(dequeue) 실패!\n");
	} 
} 
/*------------------------------------------------------------------------------------------------------------ 
함수명 및 기능: menu() - 메뉴를 출력하고 메뉴번호를 입력 받아 리턴 함 
전달인자: menuLIst - 메뉴 출력할 문자열 
          menuCnt - 메뉴 개수 
리턴값: 선택된 메뉴번호 
------------------------------------------------------------------------------------------------------------*/ 
int menu(char **menuList, int menuCnt) 
{ 
	int i; 
	int menuNum=0; /* 입력된 메뉴번호 저장 변수*/ 
	int res; /* scanf()함수의 리턴값 저장 변수*/ 
	for(i=0; i<menuCnt; i++) 
	{ 
		printf("%d. %s\n", i+1, menuList[i]); 
	} 
	while(menuNum<1 || menuNum>menuCnt) /* 메뉴번호 범위의 번호가 입력시 까지 반복*/ 
	{ 
		printf("# 메뉴번호를 입력하세요 : "); 
		res = scanf("%d", &menuNum); 
		if(res!=1) /* 정수가 입력되지 않았으면*/ 
		{ 
			myFlush(); /* 입력버퍼 비우기*/ 
			continue; 
		} 
	} 
	return menuNum; 
} 

/*------------------------------------------------------------------------------------------------------------ 
함수명 및 기능: myFlush() - 입력버퍼 지우기 
전달인자: 없음 
리턴값: 없음 
------------------------------------------------------------------------------------------------------------*/ 
void myFlush() 
{ 
	while(getchar()!='\n') 
	{ ; } 
} 
//-------------------------------------
//   int type 보조 함수
//-------------------------------------
/*--------------------------------------------------------------------------------------
  함수명 및 기능: printInt() - 전달인자로 넘겨진 int값을 정해진 format으로 출력 함
  전달인자: p - 출력할 정수의 주소
  리턴값: 없음
  --------------------------------------------------------------------------------------*/
void printInt(DataType *p)
{
	printf("%4d", *p);
}